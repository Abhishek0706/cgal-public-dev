#
# This files contains definitions needed to use CGAL in a program.
# DO NOT EDIT THIS. The definitons have been generated by CMake at configuration time.
# This file is loaded by cmake via the command "find_package(CGAL)"
#
# This file correspond to a possibly out-of-sources CGAL configuration, thus the actual location
# must be given by the cmake variable or enviroment variable CGAL_DIR. 

set(CGAL_CONFIG_LOADED TRUE)

set(CGAL_MAJOR_VERSION    "@CGAL_MAJOR_VERSION@" )
set(CGAL_MINOR_VERSION    "@CGAL_MINOR_VERSION@" )
set(CGAL_BUILD_VERSION    "@CGAL_BUILD_VERSION@" )
set(CGAL_VERSION          "@CGAL_VERSION@")
set(CGAL_SCM_BRANCH_NAME  "@CGAL_SCM_BRANCH_NAME@")
set(CGAL_GIT_SHA1         "@CGAL_GIT_SHA1@")

set(CGAL_BUILD_SHARED_LIBS        "@CGAL_BUILD_SHARED_LIBS@" )
set(CGAL_Boost_USE_STATIC_LIBS    "@CGAL_Boost_USE_STATIC_LIBS@" )

set(CGAL_CXX_FLAGS_INIT                   "@CMAKE_CXX_FLAGS@" )
set(CGAL_CXX_FLAGS_RELEASE_INIT           "@CMAKE_CXX_FLAGS_RELEASE@" )
set(CGAL_CXX_FLAGS_DEBUG_INIT             "@CMAKE_CXX_FLAGS_DEBUG@" )
set(CGAL_MODULE_LINKER_FLAGS_INIT         "@CMAKE_MODULE_LINKER_FLAGS@" )
set(CGAL_MODULE_LINKER_FLAGS_RELEASE_INIT "@CMAKE_MODULE_LINKER_FLAGS_RELEASE@" )
set(CGAL_MODULE_LINKER_FLAGS_DEBUG_INIT   "@CMAKE_MODULE_LINKER_FLAGS_DEBUG@" )
set(CGAL_SHARED_LINKER_FLAGS_INIT         "@CMAKE_SHARED_LINKER_FLAGS@" )
set(CGAL_SHARED_LINKER_FLAGS_RELEASE_INIT "@CMAKE_SHARED_LINKER_FLAGS_RELEASE@" )
set(CGAL_SHARED_LINKER_FLAGS_DEBUG_INIT   "@CMAKE_SHARED_LINKER_FLAGS_DEBUG@" )
set(CGAL_BUILD_TYPE_INIT                  "@CMAKE_BUILD_TYPE@" )

set(CGAL_INCLUDE_DIRS      "@CGAL_INCLUDE_DIRS@" )
set(CGAL_MODULES_DIR       "@CGAL_MODULES_DIR@" )
set(CGAL_LIBRARIES_DIR     "@CGAL_LIBRARIES_DIR@" )

set(CGAL_USE_FILE   "${CGAL_MODULES_DIR}/UseCGAL.cmake" )

include("@CGAL_EXPORT_FILE@")
include("${CGAL_MODULES_DIR}/CGAL_use_library.cmake")
include("${CGAL_MODULES_DIR}/CGAL_SetupDependencies.cmake")

set(CGAL_CONFIGURED_LIBRARIES @CGAL_CONFIGURED_LIBRARIES@)

# Backward compatibility definitions.
foreach(target_name ${CGAL_CONFIGURED_LIBRARIES})
  if(TARGET ${target_name})
    get_target_property(${target_name}_3RD_PARTY_INCLUDE_DIRS ${target_name} INTERFACE_INCLUDE_DIRECTORIES)
    get_target_property(${target_name}_3RD_PARTY_DEFINITIONS ${target_name} INTERFACE_COMPILE_DEFINITIONS)


    # TODO: This does not handle Release/Debug targets correctly yet.
    get_target_property(${target_name}_LIBRARY ${target_name} LOCATION)
    # This is messy, since CMake 2.8.12 introduces many policy
    # dependent changes. We try out several possibilities...
    get_target_property(${target_name}_3RD_PARTY_LIBRARIES ${target_name} LINK_INTERFACE_LIBRARIES)
    if("${${target_name}_3RD_PARTY_LIBRARIES}" STREQUAL "${target_name}_3RD_PARTY_LIBRARIES-NOTFOUND")
      get_target_property(${target_name}_3RD_PARTY_LIBRARIES ${target_name} IMPORTED_LINK_INTERFACE_LIBRARIES_RELEASE)
    endif()
    if("${${target_name}_3RD_PARTY_LIBRARIES}" STREQUAL "${target_name}_3RD_PARTY_LIBRARIES-NOTFOUND")
      get_target_property(${target_name}_3RD_PARTY_LIBRARIES ${target_name} INTERFACE_LINK_LIBRARIES)
    endif()
  endif()
endforeach()

if ( CGAL_FIND_REQUIRED )
  set( CHECK_CGAL_COMPONENT_MSG_ON_ERROR TRUE        )
  set( CHECK_CGAL_COMPONENT_ERROR_TYPE   FATAL_ERROR )
  set( CHECK_CGAL_COMPONENT_ERROR_TITLE  "ERROR:"    )
else()
  if ( NOT CGAL_FIND_QUIETLY )
    set( CHECK_CGAL_COMPONENT_MSG_ON_ERROR TRUE      )
    set( CHECK_CGAL_COMPONENT_ERROR_TYPE   STATUS    )
    set( CHECK_CGAL_COMPONENT_ERROR_TITLE "NOTICE:" )
  else()  
    set( CHECK_CGAL_COMPONENT_MSG_ON_ERROR FALSE )
  endif()
endif()

foreach(component ${CGAL_FIND_COMPONENTS})
  if(TARGET ${component})
    set(${component}_FOUND TRUE)
  else()
    set(${component}_FOUND FALSE)
  endif()

  if(NOT ${component}_FOUND AND CHECK_CGAL_COMPONENT_MSG_ON_ERROR)
    message(${CHECK_CGAL_COMPONENT_ERROR_TYPE} "${CHECK_CGAL_COMPONENT_ERROR_TITLE} The ${component} library was not configured.")
  endif()
endforeach()

# Starting with cmake 2.6.3, CGAL_FIND_COMPONENTS is cleared out when
# find_package returns. But we need it within UseCGAL.cmake, so we
# save it aside into another variable
set(CGAL_REQUESTED_COMPONENTS ${CGAL_FIND_COMPONENTS})
