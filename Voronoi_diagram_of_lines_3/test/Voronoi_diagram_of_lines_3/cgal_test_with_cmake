#! /bin/sh

# This is a script for the CGAL test suite. Such a script must obey
# the following rules:
#
# - the name of the script is cgal_test_with_cmake
# - for every target two one line messages are written to the file 'error.txt'
#     the first one indicates if the compilation was successful
#     the second one indicates if the execution was successful
#   if one of the two was not successful, the line should start with 'ERROR:'
# - running the script should not require any user interaction
# - the script should clean up object files and executables

  ERRORFILE=error.txt
  DO_RUN=y
  if [ -z "${MAKE_CMD}" ]; then
    MAKE_CMD=make
  fi
  NEED_CLEAN=

#---------------------------------------------------------------------#
#                    configure
#---------------------------------------------------------------------#

configure()
{
  echo "Configuring... "
  
  if eval 'cmake "$CMAKE_GENERATOR" -DRUNNING_CGAL_AUTO_TEST=TRUE  \
                                     -DCGAL_DIR="$CGAL_DIR" \
                                     .' ; then
                                     
      echo "   succesful configuration" >> $ERRORFILE
  else
      echo "   ERROR:    configuration" >> $ERRORFILE
  fi
}

#---------------------------------------------------------------------#
#                    compile_and_run <target>
#---------------------------------------------------------------------#

compile_and_run()
{
    echo "Compiling $1 ... "
    SUCCES="y"
    
    if eval '${MAKE_CMD} VERBOSE=ON -fMakefile $1' ; then
        echo "   succesful compilation of $1" >> $ERRORFILE
    else
        echo "   ERROR:    compilation of $1" >> $ERRORFILE
        SUCCES=""
    fi 
    
    if [ -n "$DO_RUN" ] ; then
        if [ -n "${SUCCES}" ] ; then
            OUTPUTFILE=ProgramOutput.$1.$PLATFORM
            rm -f $OUTPUTFILE
            COMMAND="./$1"
            if [ -f $1.cmd ] ; then
                COMMAND="$COMMAND `cat $1.cmd`"
            fi
            if [ -f $1.cin ] ; then
                COMMAND="cat $1.cin | $COMMAND"
            fi
            echo "Executing $1 ... "
            echo
            ulimit -t 3600 2> /dev/null
            if eval $COMMAND > $OUTPUTFILE 2>&1 ; then
                echo "   succesful execution   of $1" >> $ERRORFILE
            else
                echo "   ERROR:    execution   of $1" >> $ERRORFILE
            fi
        else
            echo   "   ERROR:    not executed   $1" >> $ERRORFILE
        fi
    fi
}




compile()
{
    echo "Compiling $1 ... "
    SUCCES="y"
    
    if eval '${MAKE_CMD} VERBOSE=ON -fMakefile $1' ; then
        echo "   succesful compilation of $1" >> $ERRORFILE
    else
        echo "   ERROR:    compilation of $1" >> $ERRORFILE
        SUCCES=""
    fi
}


run_with_inputfile()
{
    if [ -n "$DO_RUN" ] ; then
        if [ -n "${SUCCES}" ] ; then
            OUTPUTFILE=ProgramOutput.$1.$3.$PLATFORM
            rm -f $OUTPUTFILE
            COMMAND="./$1 $2$3"
            echo "Executing $COMMAND ... "
            echo
            ulimit -t 3600 2> /dev/null
            if eval $COMMAND > $OUTPUTFILE 2>&1 ; then
                echo "   succesful execution   of $COMMAND" >> $ERRORFILE
            else
                echo "   ERROR:    execution   of $COMMAND" >> $ERRORFILE
                echo "   ERROR:    execution   of $1"
                eval cat $OUTPUTFILE ;
            fi
        else
            echo   "   ERROR:    not executed   $COMMAND" >> $ERRORFILE
        fi
    fi
}





#---------------------------------------------------------------------#
#                    remove the previous error file
#---------------------------------------------------------------------#

rm -f $ERRORFILE
touch $ERRORFILE

#---------------------------------------------------------------------#
#                    configure, compile and run the tests
#---------------------------------------------------------------------#

configure

if [ $# -ne 0 ] ; then
  for file in $* ; do
    compile_and_run $file
  done
else
  echo "Run all tests."
if  ${MAKE_CMD} -f Makefile help | grep "Voronoi_diagram_of_lines_3" > /dev/null; then 
  compile Voronoi_diagram_of_lines_3

  run_with_inputfile Voronoi_diagram_of_lines_3 data/generic_cases/ one_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/generic_cases/ two_lines.dat

  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ cube.dat

  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ parallel_to_plane_one_different_side.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ parallel_to_plane_one_same_side.dat

  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ one_parallel_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_parallel_not_to_base_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_lines_one_parallel_to_base_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_parallel_lines_to_base_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ all_lines_parallel_in_same_plane.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_parallel_lines_intersecting_the_base_line.dat

  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ one_intersecting_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_lines_one_intersecting_the_base_line_I.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_lines_one_intersecting_the_base_line_II.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_lines_intersecting_on_base_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_lines_intersecting_the_base_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ intersecting_lines_in_same_plane.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ all_lines_in_same_plane_intersecting_in_same_point.dat

  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_lines_one_intersecting_one_parallel_to_base_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ all_lines_in_same_plane_one_parallel.dat

  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ line_in_direction_of_v2.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ intersecting_line_in_direction_of_v2.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ line_in_direction_of_v3.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ intersecting_line_in_direction_of_v3.dat

  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_parallel_lines_perpendicular_intersecting_the_base_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_lines_perpendicular_intersecting_the_base_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ two_intersecting_lines_with_perpendicular_bisector_to_base_line.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ all_lines_in_one_plane_with_perpendicular_bisector_to_base_line.dat

  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ one_parallel_one_intersecting_line.dat

  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ spindle_3.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ spindle_4.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/special_cases/ orthogonal_4.dat


  run_with_inputfile Voronoi_diagram_of_lines_3 data/generic_cases/ three_lines.dat
  run_with_inputfile Voronoi_diagram_of_lines_3 data/generic_cases/ four_lines.dat
  NEED_CLEAN=y
fi
if  ${MAKE_CMD} -f Makefile help | grep "envelope_3" > /dev/null; then 
  compile_and_run envelope_3
  NEED_CLEAN=y
fi
if  ${MAKE_CMD} -f Makefile help | grep "insertion_bug" > /dev/null; then 
  compile_and_run insertion_bug
  NEED_CLEAN=y
fi
fi

#
# The clean target generated by CMake under cygwin 
# always fails for some reason
#
if [ -n "${NEED_CLEAN}" ]; then 
  if ! ( uname | grep -q "CYGWIN" ) ; then
    ${MAKE_CMD} -fMakefile clean
  fi
fi
