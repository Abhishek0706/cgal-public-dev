namespace CGAL {
/*!

\mainpage User Manual
\anchor Chapter_PolygonalSurfaceReconstruction

\cgalAutoToc

\author Liangling Nan

\section secIntro Introduction

This CGAL package implments a hypothesis-and-selection-based method for piecewise planar object 
reconstruction from point clouds\cgalCite{nan2017polyfit}. The method takes as input an unordered
point set of a piecewise planar object and outputs a compact and watertight surface mesh 
interpolating the input point set. We assume that all necessary major planes can be extracted 
from the input point set (see Chapter Point Set Shape Detection) or potentially provided.  

The existing surface reconstruction methods available in CGAL (i.e., \ref Chapter_Poisson_Surface_Reconstruction,  Poisson Surface Reconstruction, 
Scale-Space Surface Reconstruction, and Advancing Front Surface Reconstruction) are suitable for 
objects of smooth surfaces. For man-made objects (which are very common in the real-world) such as 
buildings, the results are not satisfactory due to the imperfections and complexity of the reconstructed 
models (i.e., gigantic meshes, missing regions, noises, and undesired structures). This is mainly 
because that these methods tend to closely follow the surface details. The algorithm introduced in this
package can recover sharp features of the objects, and it can handle a large amount of noise and outliers,
complementing other surface reconstruction methods.


\section secAlgo Algorithm

Unlike traditional piecewise planar object reconstruction methods that focus on either extracting good 
geometric primitives or obtaining proper arrangements of primitives, the emphasis of this method lies
in intersecting the primitives (i.e., planes, but might be extended to other primitives) and seeking 
for an appropriate combination of them to obtain a manifold polygonal surface model without boundary. 

The method casts surface reconstruction as a binary labeling problem and it is based on a hypothesizing 
and selection strategy. The reconstruction consists of the following steps: 1) extracting planes from the 
input point set; 2) generating a reasonably large set of face candidates by intersecting the extracted 
planar primitives; 3) an optimal subset of the candidate faces is selected through optimization under hard 
constraints that enforce the ﬁnal polygonal surface to be manifold and watertight.

\cgalFigureBegin{polyfit, polyfit_pipeline.png}
Polygonal surface reconstruction

(a) Input point set; (b) Extracted planar segments; (c) Candidate faces generated by pairwise intersection; 
(d) Faces selected through optimization; (e) Reconstructed model. 
\cgalFigureEnd

CGAL provides algorithms for all the steps listed above except face selection. 



\subsection subsecAlgoEnergyTerms Energy Terms

Given \f$ N \f$  candidate faces \f$F = \{f_i | 1 \leq i \leq N\}\f$ generated by pairwise intersection, the optimal 
subset of the candidate faces that best describe the geometry of the object and form a manifold and watertight 
polygonal surface is selected through optimization. The following energy terms are defined to constitute the 
objective function:

- Data-ﬁtting (\f$ E_f \f$). This term is intended to evaluate the fitting quality of the faces to the point cloud while 
  accounting for an appropriate notion of confidence. It is defined to measure a confidence-weighted percentage 
  of points that do not contribute to the final reconstruction.
- Model complexity (\f$ E_m \f$). This term is to encourage simple structures (i.e., large planar regions). It is defined
  as the ratio of sharp edges in the model.
- Point coverage (\f$ E_c \f$). This term is intended to handle missing data. The idea is to keep the unsupported regions 
  (i.e., regions not covered by points) of the final model as small as possible. This term is defined as the
  ratio of uncovered regions in the model.

\subsection subsecAlgoFaceSelection Face Selection

With the above energy terms, the optimal set of faces can be obtained by minimizing a weighted sum of these terms
under certain hard constraints.

\f$
	\begin{equation}
	\begin{aligned}
	\underset{\mathbf{X}}{\text{min}} \quad & \lambda_f \cdot E_f + \lambda_m \cdot E_m +  \lambda_c \cdot E_c   \\
	\text{s.t.} 					  \quad & \begin{cases}
	\begin{aligned}
	& \sum_{j \in \mathcal{N}(e_i)} {x_j} = 2 \quad \text{or} \quad 0, 	&& 1 \leq i \leq |E|   \\
	& x_i \in \{0, 1\},                    							&& 1 \leq i \leq N
	\end{aligned}
	\end{cases}
	\end{aligned}
	\label{eq:optimization}
	\end{equation}
\f$

Here \f$ \sum_{j \in \mathcal{N}(e_i)} {x_j} \f$ counts the number of faces connected by an edge \f$ e_i \f$. 
This value is enforced to be either 0 or 2, meaning none or two of the faces are selected. These hard constraints 
guarantee that each edge of the final model connects only two adjacent faces. 

\cgalFigureBegin{intersection, intersection.png}
Intersection of two planes

Two planes intersect with each other resulting in four parts (a). (b) to (g) show all possible combinations to 
ensure a 2-manifold surface. The edge in (b) and (c) connects two co-planar parts, while in (d) to (g) it introduces 
sharp edges in the final model.
\cgalFigureEnd



\subsection subsecAlgo Model Complexity Control
In addition to favoring clean and compact reconstruction results by discouraging undesired bumps and gaps, 
having the model comlexity term also provides control over the model details, i.e., increasing the influence of the 
model complexity term results in less detailed 3D models. 

\cgalFigureBegin{complexity, complexity.png}
The effect of the model complextity term

Reconstruction by gradually increasing the influence of the model complexity term. 
The values are the weights used in the corresponding optimization.
\cgalFigureEnd





\section secPSRexamples Examples

\subsection subsecExampleNeedPlaneExtraction Reconstruction from plain point clouds

The method assumes that all necessary planes can be extracted from the input point set. The following example 
first extracts planes from the input point cloud and then reconstructs the surface model.

\cgalExample{Polygonal_surface_reconstruction/polyfit_example_no_input_planes.cpp}




\subsection subsecExampleUserProvidedPlanes Reconstruction with user-provided planes

The following example shows the reconstruction using user provided planar segments. 

\cgalExample{Polygonal_surface_reconstruction/polyfit_example_user_provided_planes.cpp}







\section secPerformances Performances

\subsection subsecTimings Timings and problem complexity
Amoung the three steps in the reconstruction pipeline, the most time consuming (when the number of candidate faces is large,
e.g., more than 5,000) step is face selection. 

The method is intended for reconstructing single objects with reasonable geometric complexity. 
The current implementation computes pairwise intersections of the planar segments, with is sufficient but not necessary to 
ensure topologically accurate reconstructions. Running on large complex objects may result in an extremely large number 
of candidate faces, and thus a huge integer programming problem to be solved.




\subsection subsecSolver The numerical solver
The current implementation incoporates two open source solvers, SCIP and GLPK. The SCIP solver is reasonally fast 
and is always your first choice, while the GLPK solver only manages to solve small problems. 
In case you are reconstructing more complex objects, you may need to consiser commercial solvers.




\section sechistory Design and Implementation History

The initial implementation was done by Liangliang Nan. 

*/
} /* namespace CGAL */
