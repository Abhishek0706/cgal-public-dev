/*!

\page tuto_reconstruction Surface Reconstruction

\author Simon Giraudot

Surface reconstruction from point clouds is a wide research topic in
geometry processing and can be achieved in many different ways. This
tutorials explains how the different algorithms of \cgal to perform
reconstruction in the most relevant way.

\section TutorialsReconstruction_algorithms Which algorithm should I use?

\cgal \cgalReleaseNumber offers three different algorithms for surface
reconstruction:

- \ref PkgPoissonSurfaceReconstruction
- \ref PkgAdvancingFrontSurfaceReconstruction
- \ref PkgScaleSpaceReconstruction3

Choosing one or the other of these methods is strongly dependent on
the input properties and the output requirement. For example, Poisson
always generates closed shapes (surrounding a volume) and requires
normals but does not interpolate input points (the output surface does
not pass exactly through the input points). The following table lists
different properties of the input and output to help you choose which
method is more suited for your work:

<center>
|                                          | Poisson | Advancing front  | Scale space      |
|------------------------------------------|:-------:|:----------------:|:----------------:|
| Are normals required?                    | Yes     | No               | No               |
| Is noise handled?                        | Yes     | By preprocessing | Yes              |
| Is variable sampling handled?            | Yes     | Yes              | By preprocessing |
| Are input points exactly on the surface? | No      | Yes              | Yes              |
| Is the output always closed?             | Yes     | No               | No               |
| Is the output always smooth?             | Yes     | No               | No               |
| Is the output always manifold?           | Yes     | Yes              | Optional         |
| Is the output always orientable?         | Yes     | Yes              | No               |
</center>


\section TutorialsReconstruction_input Reading Input

The reconstruction algorithms on \cgal take a range of iterators on a
container as input and use property maps to access the points (and the
normals if they are needed). Points are typically stored in plain text
format (denoted as 'xyz' format), each point separated by a newline
character and each coordinate separated by a white space. \cgal
provides functions to read such a format:

- `read_xyz_points()`
- `read_xyz_points_and_normals()`

Point may also be stored in an 'off' container, for which we also
provide function:

- `read_off_points()`
- `read_off_points_and_normals()`

Using these functions is pretty straightforward, as can be seen on the
following example:

\code{.cpp}
#include <CGAL/Exact_predicates_inexact_constructions_kernel.h>
#include <CGAL/IO/read_xyz_points.h>

#include <vector>
#include <fstream>

// types
typedef CGAL::Exact_predicates_inexact_constructions_kernel Kernel;
typedef Kernel::Point_3 Point;

int main(int argc, char*argv[])
{
  std::vector<Point> points;

  char* filename = "my_file.xyz";
  std::ifstream stream(filename);
  
  if (!stream ||
      !CGAL::read_xyz_points(stream, std::back_inserter(points)))
  {
    std::cerr << "Error: cannot read file " << filename << std::endl;
    return -1;
  }
  
  std::cout << "Read " << points.size () << " point(s)" << std::endl;

  return 0;
}
\endcode


\section TutorialsReconstruction_preprocessing Preprocessing

Because reconstruction algorithms have some specific requirements that
point clouds do not always meet, some preprocessing might be necessary
to get the best results.

\subsection TutorialsReconstruction_preprocessing_simplification Simplification

Some laser scanners generate points with widely variable
sampling. Typically, lines of scan are very densely sampled but the
gap between two lines of scan is much larger. This type of input point
cloud might generate badly shaped output for algorithms which, in
general, only accept small variations of sampling density.

\cgal provides several simplification algorithms. In addition to
reducing the size of the input and therefore decreasing computation
time, some of them can help making the input more uniform.



\subsection TutorialsReconstruction_preprocessing_smoothing Smoothing



\section TutorialsReconstruction_reconstruction Reconstruction

\section TutorialsReconstruction_postprocessing Postprocessing

\section TutorialsReconstruction_output Writing Output


*/
