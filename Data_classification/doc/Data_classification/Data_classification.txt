namespace CGAL {
/*!

\mainpage User Manual
\anchor Chapter_Data_Classification
\cgalAutoToc
\author Simon Giraudot

This component implements an algorithm that classifies a point cloud into a user-defined set of classes (such as ground, vegetation, buildings, etc.). A flexible API is provided so that the user can compute its own local attributes on the point cloud and define its own classes based on these attributes.

\section Data_classification_Organization Package Organization

Classification of point sets is achieved as follows:

- some analysis is performed on the input point set;
- attributes are computed based on this analysis;
- a set of classification types (for example: ground, building, vegetation) is defined by the user;
- attributes are given weights and each pair of attribute/type is assigned a relationship;
- classification is computed pointwise by minimizing an energy defined as the sum of the values taken by attributes on input points (which depend on the attribute/type relationship)
- additional regularization can be used by smoothing either locally or globally through an Alpha Expansion approach.

This package is designed to be easily extended by the user: more specifically, attributes and types can be defined by the user to handle any data he/she needs to classify (although \cgal provides a predefined framework for common urban scenes).

\cgalFigureBegin{Data_classification_Organization,organization.png}
Organization of the package.
\cgalFigureEnd

\section Data_classification_structures Data Structures

\subsection Data_classification_analysis Analysis

Classification is based on the computation of local attributes of points. These attributes often require precomputed analysis structures: such data structures might be shared by several attributes and are therefore computed separately.

\cgal provides the following structures:

- `CGAL::Data_classification::Neighborhood` stores spatial searching structures and provides adapted queries on indexed points;
- `CGAL::Data_classification::Local_eigen_analysis` precomputes covariance matrices on local neighborhood of points and stores the associated eigenvectors and eigenvalues;
- `CGAL::Data_classification::Planimetric_grid` is a 2D grid used for digital terrain modeling.

The following code snippet shows how to instantiate such data structures from an input PLY point set (the full example is given at the end of the manual).

\snippet Data_classification/example_point_set_classification.cpp Analysis

\subsection Data_classification_attributes Attributes

Attributes are defined as scalar fields that associate each input point with a specific value. In the \cgal classification framework, an abstract class `CGAL::Data_classification::Attribute` defines what method the attribute must provide. All attributes must inherit this class. User can define its own attribute.

Attributes are accessed through `Handle` objects, `CGAL::Data_classification::Attribute_handle`.

\cgal provides some predefined attributes that make sense in urban scene classification:

- `CGAL::Data_classification::Attribute_distance_to_plane` measures how far away a point is from a locally estimated plane;
- `CGAL::Data_classification::Attribute_elevation` estimates the local distance to an estimated ground;
- `CGAL::Data_classification::Attribute_vertical_dispersion` computes how noisy the point set is on a local Z-cylinder;
- `CGAL::Data_classification::Attribute_verticality` compares the local normal vector to the vertical vector.

For more details about how these different attributes can help identifying one classification type or the other, please refer to their associated reference manual pages. In addition, \cgal also provides attributes solely based on the local eigen values. Such attributes are less easy to relate to a specific classification type but can still be useful:

- `CGAL::Data_classification::Attribute_anisotropy`;
- `CGAL::Data_classification::Attribute_eigentropy`;
- `CGAL::Data_classification::Attribute_linearity`;
- `CGAL::Data_classification::Attribute_omnivariance`;
- `CGAL::Data_classification::Attribute_planarity`;
- `CGAL::Data_classification::Attribute_sphericity`;
- `CGAL::Data_classification::Attribute_sum_eigenvalues`;
- `CGAL::Data_classification::Attribute_surface_variation`.

Finally, if the input point set has additional properties, these can also be used as attributes. For example, \cgal provides the following attributes:

- `CGAL::Data_classification::Attribute_echo_scatter` uses the number of returns (echo) provided by most LIDAR scanners if available;
- `CGAL::Data_classification::Attribute_hsv` uses input color information if available.

A subset of these attributes are used in the following code snippet and their weights are set:

\snippet Data_classification/example_point_set_classification.cpp Attributes

\subsection Data_classification_types Classification Types

A classification type represents how a point should be classified, for example: vegetation, building, road, etc. It is defined by the values the attributes are expected to take for a specific type. For example, vegetation is expected to have a high distance to plane and have a color close to green (if colors are available); facades have a low distance to plane and a low verticality; etc.

\cgal provides a class `CGAL::Data_classification::Type` to define such a set of attribute effects, along with the associated `Handle` object: `CGAL::Data_classification::Type_handle`. Each type may define how a specific attribute affects it:

- `FAVORED_ATT`: the type is favored by high values of the attribute
- `NEUTRAL_ATT`: the type is not affected by the attribute
- `PENALIZED_ATT`: the type is favored by low values of the attribute

\subsection Data_classification_types_example Example


\section Data_classification_helper Helper

The classification algorithm is designed to be as flexible as possible: the user may define its own attributes and classification types (see \ref Data_classification_custom).

Nevertheless, \cgal provides a predefined framework that should work correctly on common urban point sets. The class `CGAL::Data_classification::Helper` is designed to make it easier for the user to classify its input point set:

- it takes care of generating all needed analysis structure;
- it generates all possible attributes (among all the \cgal predefined ones) based on which property maps are available (it uses colors if available, etc.);
- multiple scales can be used to increase the quality of the results
- input/ouput methods are provided to save and recover a specific configuration (with all attributes, types and relationships between them).
- classification can be saved as a PLY format with colors and labels.

\subsection Data_classification_helper_example Example

\section Data_classification_training Training

Classification is based on relationships between attributes and types. Each attribute has a specific weight and each pair of attribute/type has a specific effect. This means that the number of parameters to set up becomes rapidly large: if 6 attributes are used to classify between 4 classification types, 30 parameters have to be set up.

Though it is possible to set them one by one, \cgal also provides a training algorithm that requires a small set of ground truth points provided by the user. More specifically, the user must provide, for each classification type he/she wants to classify, a set of known inliers among the input point set (for example, selecting one roof, one tree, one section of the ground). The training algorithm works as follows:

- weights are randomly picked;

- considering these weights, the effects each attribute have on each type is estimated. If an attribute has the same effect on each type, it is non-relevant for classification and therefore not used;

- each ground truth points provided by the user is classified using this set of weights and effects;

- for each classification type, the ratio of correctly classified ground truth points is computed. The minimum of this ratios is used as a score for this set of weights and effects: a ratio of 0.8 means that for each classification type, at least 80\% of the provided ground truth point were correctly classified;

- the same mechanism is repeated. Weights are only changed one by one, the other ones kept to the previous value that gave the best score.

This usually converges to a satisfying solution quickly. The number of trials is user defined, set to 300 by default. Using at least 10 times the number of attributes is advised. If the solution is not satisfying, more ground truth points can be selected,for example, in a region that the user identifies as misclassified with the current configuration. The training algorithm keeps the best weights found as initialization and carries on trying new weights by taking new ground truth points into account.

\cgalFigureBegin{Data_classification_training_fig,classif_training.png}
Example of evolution of training score. Purple curve is the score computed at the current iteration, green curve is the best score found so far. Iterations where better solutions are found are marked by vertical gray lines.
\cgalFigureEnd


\subsection Data_classification_helper_example Example

\section Data_classification_regularization Regularization


Classification is performed by minizing an energy over the input point set. This energy can be regularized with different methods. \cgal provides 3 different methods for classification, ranging from high speed / low quality to low speed / high quality:

- `CGAL::Point_set_classification::run()` 
- `CGAL::Point_set_classification::run_with_local_smoothing()`
- `CGAL::Point_set_classification::run_with_graphcut()`

\cgalFigureBegin{Data_classification_image,classif.png}
Left: input point set. Right: output classification represented by a set of colors (ground is orange, facades are blue, roofs are pink and vegetation is green).
\cgalFigureEnd

\subsection Data_classification_helper_example Example

The following example:

- reads an input file (LIDAR point set in PLY format);
- computes useful structures from this input;
- computes segmentation attributes from the input and the precomputed structures;
- defines 3 classification types (vegetation, ground and roof) along with the effects of attributes on them;
- classifies the point set;
- saves the result in a colored PLY format.

\cgalExample{Data_classification/example_point_set_classification.cpp}


\section Data_classification_custom Defining Custom attributes and Types

\subsection Data_classification_custom_example Examples






*/
} /* namespace CGAL */
