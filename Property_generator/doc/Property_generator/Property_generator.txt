namespace CGAL {
/*!

\mainpage User Manual 
\anchor Chapter_Property_generator
\cgalAutoToc
\authors Ross Hemsley and Olivier Devillers

\section Introduction Introduction
In this package, we provide a simplified way to generate frequently used
properties of geometric objects in \cgal containers.

Geometric objects have many intrinsic properties which can be non-trivial to
compute. For example, computing the aspect ratio of triangular faces in a
`Triangulation_2` is a frequent task that requires many lines of code to
implement. Since there are so many potential properties that can be computed, it
may not be desirable (or possible) to make them available within the classes for
the geometric objects themselves. This is especially true when the computations
involved are non-trivial or non-exact. We thus provide a uniform interface for
providing extra functors to both compute properties of individual objects and to
iteratively apply these functors to all objects contained within a \cgal
container. The aim of this package is to provide newer \cgal users with
everything they need to perform standard calculations on \cgal geometric
structures, to make computation of commonly used functions robust and simple,
and to minimise code duplication.

As an example, we demonstrate a method in which a user may compute the maximum
aspect ratio over all faces in a Triangulation_2. We define the aspect ratio of
a triangle to be ratio of the longest edge to the shortest edge.
\cgalExample{Property_generator/aspect_ratio_example.cpp}
In our example, we generate a random triangulation with 10,000 points (note that
we incrementally construct the triangulation for clarity of exposition, whereas
range insert should be preferred in general.) We then use
`CGAL::max_result` to return the maximum value over the range of
aspect ratios generated by the `CGAL::Properties::Triangulation_2::Aspect_ratio`
functor. We pass the functor the tag `CGAL::No_finite_test_tag`
since we know that all faces in the given rage are finite, this avoids
superfluous conditionals in each iteration of the loop.

\section Section_property_functors Property Functors
In this package, we provide a collection of namespaces containing function
objects (functors) to operate on geometric structures in \cgal. These are nested
within the CGAL::Properties namespace.

We currently provide function objects to compute commonly used properties for
vertices, edges and faces of the `Triangulation_2` data structure. These are
bundled in the namespace `CGAL::Properties::Triangulation_2` in order to
avoid clashes between existing functions, and to group function objects
together. These function objects can be used with the statistics functions in
`STL_extension`, or used directly by users. As an example, we may wish to
compute the aspect ratio of a face in a triangulation, this is shown 
in the following example.
\cgalExample{Property_generator/single_functor_example.cpp}
We must first instantiate the function object with the triangulation, this is so
the function object can query the triangulation for information about faces that
is not contained within the `Face_2` class (for example, our implementation
checks to see whether or not the face is infinite). The resulting funciton
object can then be applied just like any other function. In general we may
provide the full name for the function object including its template arguments,
but in this example we simply use
`CGAL::Properties::Triangulation_2::make_aspect_ratio` which uses type deduction
to discover the triangulation type automatically. Note that to avoid long
identifiers, we can either use a `using` statement to bring the desired
namespace or function into the current scope, or use C++ namespace aliases to
provide more concise names for specific namespaces (as we do in the examples).

\section Section_property_functor_robustness Robustness
Since the purpose of this package is for statistics computation, the majority of
functors provided implicitly use approximations using floating-point arithmetic.
We make an effort to ensure that the function objects provided will give
sensible results independent of the input given. In particular, when computing
the aspect ratio of an infinite face in a `Triangulation_2` the
`CGAL::Properties::Triangulation_2::Aspect_ratio` functor will return
`Geom_traits::FT(std::numeric_limits<double>::infinity())`, whereas a naive
implementation would likely return a non-nonsensical value depending on the
location of the face in the plane. This behaviour could potentially surprise a
user that wished to compute, for example, the area of a star for a `Vertex_2` in
a 2D Triangulation; since even a finite vertex may have neighbouring faces with
infinite area. Our implementation ensures that the star area for these
vertices would be infinity, where an implementation not doing the required tests
would result in undefined behaviour.

Doing this requires testing the input for infinite vertices, which may add extra
overhead that is undesirable for some users. Therefore, this checking may be
turned off if the user can guarantee that the input is finite. Finally, the user
assumes responsibility for not providing erroneous inputs to the functors. For
example, passing a Face_handle to the aspect_ratio functor will give
unpredictable results if the aspect_ratio functor was initialised to a
Triangulation_2 that differs to the one which the face is contained within (in
particular, the test for finiteness is invalidated).

\section Section_Demo The Delaunay Visualiser Demo
To demonstrate the use of the `Properties` namespace and the triangulation
property functors, we provide a Qt-based demo. The demo allows the user to
generate, visualise and navigate very large triangulations (it has been tested
with triangulations with up to 20,000,000 points.) The user may select
sections of the points and create plots based on properties of items within the
selection.

\cgalFigureBegin{demo_screenshot,demo_screenshot.jpg}
A screenshot of the Delaunay Visualiser application.
\cgalFigureEnd

\subsection Dependencies
The demo depends upon two external libraries to compile: Qt4 (for the
user interface) and Qwt (which is a set of Qt widgets used to draw the plots.)

*/ 

} /* namespace CGAL */

